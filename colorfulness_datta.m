function score = colorfulness_datta(img)
% COLORFULNESS_DATTA
%
%   Computes colorfulness proposed by Datta, et al. ECCV'06.
%   Higher score (farther EMD distance) = Less colorful
%
%   Requires Earth Move Distance (EMD) solver by Ofir Pele
%   http://www.cs.huji.ac.il/~ofirpele/FastEMD/

[h, w, c] = size(img);
if c ~= 3
    score = 0;
    return;
end

% vectorize image
img = reshape(img, [h*w, c]);

% create reference distribution
D1 = ones(64, 1) * (1 / 64);
D1gm = [ ...
   31.5000   31.5000   31.5000; ...
   31.5000   31.5000   95.5000; ...
   31.5000   31.5000  159.5000; ...
   31.5000   31.5000  223.5000; ...
   31.5000   95.5000   31.5000; ...
   31.5000   95.5000   95.5000; ...
   31.5000   95.5000  159.5000; ...
   31.5000   95.5000  223.5000; ...
   31.5000  159.5000   31.5000; ...
   31.5000  159.5000   95.5000; ...
   31.5000  159.5000  159.5000; ...
   31.5000  159.5000  223.5000; ...
   31.5000  223.5000   31.5000; ...
   31.5000  223.5000   95.5000; ...
   31.5000  223.5000  159.5000; ...
   31.5000  223.5000  223.5000; ...
   95.5000   31.5000   31.5000; ...
   95.5000   31.5000   95.5000; ...
   95.5000   31.5000  159.5000; ...
   95.5000   31.5000  223.5000; ...
   95.5000   95.5000   31.5000; ...
   95.5000   95.5000   95.5000; ...
   95.5000   95.5000  159.5000; ...
   95.5000   95.5000  223.5000; ...
   95.5000  159.5000   31.5000; ...
   95.5000  159.5000   95.5000; ...
   95.5000  159.5000  159.5000; ...
   95.5000  159.5000  223.5000; ...
   95.5000  223.5000   31.5000; ...
   95.5000  223.5000   95.5000; ...
   95.5000  223.5000  159.5000; ...
   95.5000  223.5000  223.5000; ...
  159.5000   31.5000   31.5000; ...
  159.5000   31.5000   95.5000; ...
  159.5000   31.5000  159.5000; ...
  159.5000   31.5000  223.5000; ...
  159.5000   95.5000   31.5000; ...
  159.5000   95.5000   95.5000; ...
  159.5000   95.5000  159.5000; ...
  159.5000   95.5000  223.5000; ...
  159.5000  159.5000   31.5000; ...
  159.5000  159.5000   95.5000; ...
  159.5000  159.5000  159.5000; ...
  159.5000  159.5000  223.5000; ...
  159.5000  223.5000   31.5000; ...
  159.5000  223.5000   95.5000; ...
  159.5000  223.5000  159.5000; ...
  159.5000  223.5000  223.5000; ...
  223.5000   31.5000   31.5000; ...
  223.5000   31.5000   95.5000; ...
  223.5000   31.5000  159.5000; ...
  223.5000   31.5000  223.5000; ...
  223.5000   95.5000   31.5000; ...
  223.5000   95.5000   95.5000; ...
  223.5000   95.5000  159.5000; ...
  223.5000   95.5000  223.5000; ...
  223.5000  159.5000   31.5000; ...
  223.5000  159.5000   95.5000; ...
  223.5000  159.5000  159.5000; ...
  223.5000  159.5000  223.5000; ...
  223.5000  223.5000   31.5000; ... 
  223.5000  223.5000   95.5000; ... 
  223.5000  223.5000  159.5000; ...
  223.5000  223.5000  223.5000  ...
];

% calculate image distribution
D2 = zeros(64, 1);
D2gm = zeros(64, 3);
idn = 1;
for idr = 1 : 4
    for idg = 1 : 4
        for idb = 1 : 4
            logic_ind = ((idr-1)*64) <= img(:,1) & img(:,1) < (idr*64) & ...
                ((idg-1)*64) <= img(:,2) & img(:,2) < (idg*64) & ...
                ((idb-1)*64) <= img(:,3) & img(:,3) < (idb*64);
            
            D2(idn) = sum( logic_ind );
            if D2(idn) > 0
                D2gm(idn,:) = mean( img(logic_ind, :), 1 );    
            end
            
            idn = idn + 1;
        end
    end
end
D2 = D2 ./ sum(D2);

% map rgb to luv and compute Euclidean distance
D1gm = D1gm ./ 255;
D2gm = D2gm ./ 255;
D1gm = colorspace('RGB->Luv', D1gm)';
D2gm = colorspace('RGB->Luv', D2gm)';
d12 = pdist2(D1gm', D2gm');

% compute the EMD
score = emd_hat_gd_metric_mex(D1, D2, d12);

%% code below is the EMD solver usage example
% clc; close all; clear all;
% rand('state',sum(100*clock));
% 
% N= 1000;
% THRESHOLD= 3;
% extra_mass_penalty= -1;
% 
% P= rand(N,1);
% Q= rand(N,1);
% 
% D= ones(N,N).*THRESHOLD;
% for i=1:N
%     for j=max([1 i-THRESHOLD+1]):min([N i+THRESHOLD-1])
%         D(i,j)= abs(i-j); 
%     end
% end
% 
% score = emd_hat_gd_metric_mex(P,Q,D,extra_mass_penalty);

end
